---
version: 0.2

branches:
  feature/*, improvement/*, bugfix/*, w/*, q/*, hotfix/*, dependabot/*:
    stage: pre-merge
  development/*:
    stage: post-merge

models:
  - env: &global-env
      azurebackend_AZURE_STORAGE_ACCESS_KEY: >-
        %(secret:azure_storage_access_key)s
      azurebackend_AZURE_STORAGE_ACCOUNT_NAME: >-
        %(secret:azure_storage_account_name)s
      azurebackend_AZURE_STORAGE_ENDPOINT: >-
        %(secret:azure_storage_endpoint)s
      azurebackend2_AZURE_STORAGE_ACCESS_KEY: >-
        %(secret:azure_storage_access_key_2)s
      azurebackend2_AZURE_STORAGE_ACCOUNT_NAME: >-
        %(secret:azure_storage_account_name_2)s
      azurebackend2_AZURE_STORAGE_ENDPOINT: >-
        %(secret:azure_storage_endpoint_2)s
      azurebackendmismatch_AZURE_STORAGE_ACCESS_KEY: >-
        %(secret:azure_storage_access_key)s
      azurebackendmismatch_AZURE_STORAGE_ACCOUNT_NAME: >-
        %(secret:azure_storage_account_name)s
      azurebackendmismatch_AZURE_STORAGE_ENDPOINT: >-
        %(secret:azure_storage_endpoint)s
      azurenonexistcontainer_AZURE_STORAGE_ACCESS_KEY: >-
        %(secret:azure_storage_access_key)s
      azurenonexistcontainer_AZURE_STORAGE_ACCOUNT_NAME: >-
        %(secret:azure_storage_account_name)s
      azurenonexistcontainer_AZURE_STORAGE_ENDPOINT: >-
        %(secret:azure_storage_endpoint)s
      azuretest_AZURE_BLOB_ENDPOINT: "%(secret:azure_storage_endpoint)s"
      b2backend_B2_ACCOUNT_ID: "%(secret:b2backend_b2_account_id)s"
      b2backend_B2_STORAGE_ACCESS_KEY: >-
        %(secret:b2backend_b2_storage_access_key)s
      GOOGLE_SERVICE_EMAIL: "%(secret:gcp_service_email)s"
      GOOGLE_SERVICE_KEY: "%(secret:gcp_service_key)s"
      AWS_S3_BACKEND_ACCESS_KEY: "%(secret:aws_s3_backend_access_key)s"
      AWS_S3_BACKEND_SECRET_KEY: "%(secret:aws_s3_backend_secret_key)s"
      AWS_S3_BACKEND_ACCESS_KEY_2: "%(secret:aws_s3_backend_access_key_2)s"
      AWS_S3_BACKEND_SECRET_KEY_2: "%(secret:aws_s3_backend_secret_key_2)s"
      AWS_GCP_BACKEND_ACCESS_KEY: "%(secret:aws_gcp_backend_access_key)s"
      AWS_GCP_BACKEND_SECRET_KEY: "%(secret:aws_gcp_backend_secret_key)s"
      AWS_GCP_BACKEND_ACCESS_KEY_2: "%(secret:aws_gcp_backend_access_key_2)s"
      AWS_GCP_BACKEND_SECRET_KEY_2: "%(secret:aws_gcp_backend_secret_key_2)s"
      b2backend_B2_STORAGE_ENDPOINT: "%(secret:b2backend_b2_storage_endpoint)s"
      gcpbackend2_GCP_SERVICE_EMAIL: "%(secret:gcp2_service_email)s"
      gcpbackend2_GCP_SERVICE_KEY: "%(secret:gcp2_service_key)s"
      gcpbackend2_GCP_SERVICE_KEYFILE: /root/.gcp/servicekey
      gcpbackend_GCP_SERVICE_EMAIL: "%(secret:gcp_service_email)s"
      gcpbackend_GCP_SERVICE_KEY: "%(secret:gcp_service_key)s"
      gcpbackendmismatch_GCP_SERVICE_EMAIL: >-
        %(secret:gcpbackendmismatch_gcp_service_email)s
      gcpbackendmismatch_GCP_SERVICE_KEY: >-
        %(secret:gcpbackendmismatch_gcp_service_key)s
      gcpbackend_GCP_SERVICE_KEYFILE: /root/.gcp/servicekey
      gcpbackendmismatch_GCP_SERVICE_KEYFILE: /root/.gcp/servicekey
      gcpbackendnoproxy_GCP_SERVICE_KEYFILE: /root/.gcp/servicekey
      gcpbackendproxy_GCP_SERVICE_KEYFILE: /root/.gcp/servicekey
  - env: &multiple-backend-vars
      S3BACKEND: "mem"
      S3DATA: "multiple"
  - env: &file-mem-mpu
      S3BACKEND: "file"
      S3VAULT: "mem"
      MPU_TESTING: "yes"
  - Git: &clone
      name: Pull repo
      repourl: '%(prop:git_reference)s'
      shallow: true
      retryFetch: true
      haltOnFailure: true
  - ShellCommand: &credentials
      name: Setup Credentials
      command: bash eve/workers/build/credentials.bash
      haltOnFailure: true
      env: *global-env
  - ShellCommand: &node_version
      name: get node version
      command: node -v
  - ShellCommand: &yarn-install
      name: install modules
      command: yarn install --ignore-engines --frozen-lockfile --network-concurrency=1
      haltOnFailure: true
  - ShellCommand: &check-s3-action-logs
      name: Check s3 action logs
      command: |
        LOGS=`cat /artifacts/s3.log | grep 'No actionLog'`
        test `echo -n ${LOGS} | wc -l` -eq 0 || (echo $LOGS && false)
  - Upload: &upload-artifacts
      source: /artifacts
      urls:
        - "*"
  - ShellCommand: &follow-s3-log
      logfiles:
        s3:
          filename: /artifacts/s3.log
          follow: true
  - ShellCommand: &setup-junit-upload
      name: preparing junit files for upload
      command: |
        mkdir -p artifacts/junit
        find . -name "*junit*.xml" -exec cp {} artifacts/junit/ ";"
      alwaysRun: true
  - Upload: &upload-junits
      source: artifacts
      urls:
        - "*"
      alwaysRun: true
  - ShellCommand: &setup-github-ssh
      name: setup ssh with github
      command: |
        mkdir -p ~/.ssh
        ssh-keyscan -H github.com > ~/.ssh/ssh_known_hosts

stages:
  pre-merge:
    worker:
      type: local
    steps:
      - TriggerStages:
          name: Launch all workers
          stage_names:
            - linting-coverage
            - file-ft-tests
            - multiple-backend-test
            - kmip-ft-tests
            - utapi-v2-tests
          waitForFinish: true
          haltOnFailure: true

  linting-coverage:
    worker:
      type: docker
      path: eve/workers/build
      volumes: &default_volumes
        - '/home/eve/workspace'
    steps:
      - Git: *clone
      - ShellCommand: *setup-github-ssh
      - ShellCommand: *yarn-install
      - ShellCommand: *credentials
      - ShellCommand:
          name: Linting
          command: |
            set -ex
            yarn run --silent lint -- --max-warnings 0
            yarn run --silent lint_md
            flake8 $(git ls-files "*.py")
            yamllint -c yamllint.yml $(git ls-files "*.yml")
      - ShellCommand:
          name: Unit Coverage
          command: |
            set -ex
            mkdir -p $CIRCLE_TEST_REPORTS/unit
            yarn test
            yarn run test_versionid_base62
            yarn run test_legacy_location
          env: &shared-vars
            <<: *global-env
            S3_LOCATION_FILE: tests/locationConfig/locationConfigTests.json
            CIRCLE_TEST_REPORTS: /tmp
            CIRCLE_ARTIFACTS: /tmp
            CI_REPORTS: /tmp
      - ShellCommand:
          name: Unit Coverage logs
          command: find /tmp/unit -exec cat {} \;
      - ShellCommand: *setup-junit-upload
      - Upload: *upload-junits

  multiple-backend-test:
    worker:
      type: kube_pod
      path: eve/workers/pod.yaml
      images:
        aggressor: eve/workers/build
        s3: "."
      vars:
        aggressorMem: "2560Mi"
        s3Mem: "2560Mi"
        env:
          <<: *multiple-backend-vars
          <<: *global-env
    steps:
      - Git: *clone
      - ShellCommand: *setup-github-ssh
      - ShellCommand: *credentials
      - ShellCommand: *yarn-install
      - ShellCommand:
          command: |
            bash -c "
            source /root/.aws/exports &> /dev/null
            set -ex
            bash wait_for_local_port.bash 8000 40
            yarn run multiple_backend_test"
          <<: *follow-s3-log
          env:
            <<: *multiple-backend-vars
            <<: *global-env
            S3_LOCATION_FILE: tests/locationConfig/locationConfigTests.json
      - ShellCommand:
          command: mvn test
          workdir: build/tests/functional/jaws
          <<: *follow-s3-log
          env:
            <<: *multiple-backend-vars
      - ShellCommand:
          command: rspec tests.rb
          workdir: build/tests/functional/fog
          <<: *follow-s3-log
          env:
            <<: *multiple-backend-vars
      - ShellCommand: *check-s3-action-logs
      - ShellCommand: *setup-junit-upload
      - Upload: *upload-artifacts
      - Upload: *upload-junits

  file-ft-tests:
    worker:
      type: kube_pod
      path: eve/workers/pod.yaml
      images:
        aggressor: eve/workers/build
        s3: "."
      vars:
        aggressorMem: "2560Mi"
        s3Mem: "2Gi"
        redis: enabled
        env:
          <<: *file-mem-mpu
          <<: *global-env
    steps:
      - Git: *clone
      - ShellCommand: *setup-github-ssh
      - ShellCommand: *credentials
      - ShellCommand: *yarn-install
      - ShellCommand:
          command: |
            set -ex
            bash wait_for_local_port.bash 8000 40
            yarn run ft_test
          <<: *follow-s3-log
          env:
            <<: *file-mem-mpu
            <<: *global-env
      - ShellCommand: *check-s3-action-logs
      - ShellCommand: *setup-junit-upload
      - Upload: *upload-artifacts
      - Upload: *upload-junits

  kmip-ft-tests:
    worker:
      type: kube_pod
      path: eve/workers/pod.yaml
      images:
        aggressor: eve/workers/build
        s3: "."
        pykmip: eve/workers/pykmip
      vars:
        aggressorMem: "2560Mi"
        s3Mem: "1664Mi"
        redis: enabled
        pykmip: enabled
        env:
          <<: *file-mem-mpu
          <<: *global-env
    steps:
      - Git: *clone
      - ShellCommand: *credentials
      - ShellCommand: *yarn-install
      - ShellCommand:
          command: |
            set -ex
            bash wait_for_local_port.bash 8000 40
            bash wait_for_local_port.bash 5696 40
            yarn run ft_kmip
          logfiles:
            pykmip:
              filename: /artifacts/pykmip.log
              follow: true
            s3:
              filename: /artifacts/s3.log
              follow: true
          env:
            <<: *file-mem-mpu
            <<: *global-env
      - ShellCommand: *setup-junit-upload
      - Upload: *upload-artifacts
      - Upload: *upload-junits

  utapi-v2-tests:
    worker:
      type: kube_pod
      path: eve/workers/pod.yaml
      images:
        aggressor: eve/workers/build
        s3: "."
      vars:
        aggressorMem: "2560Mi"
        s3Mem: "2Gi"
        env:
          ENABLE_UTAPI_V2: t
          S3BACKEND: mem
          BUCKET_DENY_FILTER: utapi-event-filter-deny-bucket
    steps:
      - Git: *clone
      - ShellCommand: *setup-github-ssh
      - ShellCommand: *credentials
      - ShellCommand: *yarn-install
      - ShellCommand:
          command: |
            bash -c "
            source /root/.aws/exports &> /dev/null
            set -ex
            bash wait_for_local_port.bash 8000 40
            yarn run test_utapi_v2"
          <<: *follow-s3-log
          env:
            ENABLE_UTAPI_V2: t
            S3BACKEND: mem
      - ShellCommand: *check-s3-action-logs
      - ShellCommand: *setup-junit-upload
      - Upload: *upload-artifacts
      - Upload: *upload-junits

  post-merge:
    worker:
      type: local
    steps:
      - Git: *clone
      - ShellCommand: &docker_login
          name: Private Registry Login
          command: >
            docker login
            -u '%(secret:private_registry_username)s'
            -p '%(secret:private_registry_password)s'
            '%(secret:private_registry_url)s'
      - ShellCommand:
          name: Dockerhub Login
          command: >
            docker login
            -u '%(secret:dockerhub_ro_user)s'
            -p '%(secret:dockerhub_ro_password)s'
      - SetProperty: &docker_image_name
          name: Set docker image name property
          property: docker_image_name
          value:
            "%(secret:private_registry_url)s/zenko/cloudserver:\
            %(prop:commit_short_revision)s"
      - ShellCommand:
          name: Build docker image
          command: >-
            docker build
            --no-cache
            -t %(prop:docker_image_name)s
            .
      - ShellCommand:
          name: Tag images
          command: |
            docker tag %(prop:docker_image_name)s zenko/cloudserver:$TAG
          env:
            TAG: "latest-%(prop:product_version)s"
      - ShellCommand:
          name: Push image
          command: |
            docker push %(prop:docker_image_name)s
            docker push zenko/cloudserver:latest-%(prop:product_version)s
